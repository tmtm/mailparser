#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'
module MailParser
  module RFC2183
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 42)

require "mailparser/rfc2183/scanner"

def parse(header_type, value)
  @header_type = header_type
  @value = value
  @scanner = Scanner.new(header_type, value)
  ret = yyparse(self, :parse_sub)
  class << ret
    attr_accessor :comments
  end
  ret.comments = @scanner.comments
  ret
end

def parse_sub(&block)
  yield [@header_type, nil]
  @scanner.scan(&block)
end

def on_error(t, val, vstack)
#  p t, val, vstack
#  p racc_token2str(t)
  raise MailParser::ParseError, val+@scanner.rest
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    15,     2,     3,    16,     6,     7,     9,    12,    13 ]

racc_action_check = [
    13,     0,     1,    13,     2,     3,     8,     9,    11 ]

racc_action_pointer = [
    -1,     2,     1,     5,   nil,   nil,   nil,   nil,     2,     4,
   nil,     3,   nil,    -3,   nil,   nil,   nil ]

racc_action_default = [
   -10,   -10,   -10,   -10,    -1,    -4,    -3,    17,    -2,   -10,
    -5,   -10,    -7,   -10,    -6,    -8,    -9 ]

racc_goto_table = [
     1,     4,     5,     8,    10,    11,    14 ]

racc_goto_check = [
     1,     2,     3,     4,     5,     6,     7 ]

racc_goto_pointer = [
   nil,     0,    -1,     0,    -2,    -5,    -4,    -7 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 8, :_reduce_1,
  2, 9, :_reduce_2,
  1, 10, :_reduce_none,
  0, 11, :_reduce_4,
  3, 11, :_reduce_5,
  3, 12, :_reduce_6,
  1, 13, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none ]

racc_reduce_n = 10

racc_shift_n = 17

racc_token_table = {
  false => 0,
  :error => 1,
  :CONTENT_DISPOSITION => 2,
  :TOKEN => 3,
  ";" => 4,
  "=" => 5,
  :QUOTED_STRING => 6 }

racc_nt_base = 7

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "CONTENT_DISPOSITION",
  "TOKEN",
  "\";\"",
  "\"=\"",
  "QUOTED_STRING",
  "$start",
  "all",
  "content_disposition",
  "type",
  "parameter_list",
  "parameter",
  "attribute",
  "value" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 9)
  def _reduce_1(val, _values)
    val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_2(val, _values)
                        ContentDisposition.new(val[0], val[1])

  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_4(val, _values)
                        {}

  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_5(val, _values)
                        pn, pv = val[2]
                    pv = $1 if pv =~ /\A\"(.*)\"\Z/m
                    val[0][pn] = pv.gsub(/\s*\n\s*/, " ")
                    val[0]

  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_6(val, _values)
                        [val[0].downcase, val[2]]

  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

def _reduce_none(val, _values)
  val[0]
end

    end   # class Parser
  end   # module RFC2183
end   # module MailParser
